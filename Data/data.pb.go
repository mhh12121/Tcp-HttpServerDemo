// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data.proto

package data

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ToServerData struct {
	Ctype                *int32   `protobuf:"varint,1,req,name=ctype" json:"ctype,omitempty"`
	Httpdata             []byte   `protobuf:"bytes,2,opt,name=httpdata" json:"httpdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToServerData) Reset()         { *m = ToServerData{} }
func (m *ToServerData) String() string { return proto.CompactTextString(m) }
func (*ToServerData) ProtoMessage()    {}
func (*ToServerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{0}
}

func (m *ToServerData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToServerData.Unmarshal(m, b)
}
func (m *ToServerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToServerData.Marshal(b, m, deterministic)
}
func (m *ToServerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToServerData.Merge(m, src)
}
func (m *ToServerData) XXX_Size() int {
	return xxx_messageInfo_ToServerData.Size(m)
}
func (m *ToServerData) XXX_DiscardUnknown() {
	xxx_messageInfo_ToServerData.DiscardUnknown(m)
}

var xxx_messageInfo_ToServerData proto.InternalMessageInfo

func (m *ToServerData) GetCtype() int32 {
	if m != nil && m.Ctype != nil {
		return *m.Ctype
	}
	return 0
}

func (m *ToServerData) GetHttpdata() []byte {
	if m != nil {
		return m.Httpdata
	}
	return nil
}

type ResponseFromServer struct {
	Success              *bool    `protobuf:"varint,1,req,name=Success" json:"Success,omitempty"`
	TcpData              []byte   `protobuf:"bytes,2,opt,name=tcpData" json:"tcpData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseFromServer) Reset()         { *m = ResponseFromServer{} }
func (m *ResponseFromServer) String() string { return proto.CompactTextString(m) }
func (*ResponseFromServer) ProtoMessage()    {}
func (*ResponseFromServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{1}
}

func (m *ResponseFromServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseFromServer.Unmarshal(m, b)
}
func (m *ResponseFromServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseFromServer.Marshal(b, m, deterministic)
}
func (m *ResponseFromServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseFromServer.Merge(m, src)
}
func (m *ResponseFromServer) XXX_Size() int {
	return xxx_messageInfo_ResponseFromServer.Size(m)
}
func (m *ResponseFromServer) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseFromServer.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseFromServer proto.InternalMessageInfo

func (m *ResponseFromServer) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *ResponseFromServer) GetTcpData() []byte {
	if m != nil {
		return m.TcpData
	}
	return nil
}

type RealUser struct {
	Username             *string  `protobuf:"bytes,1,req,name=Username" json:"Username,omitempty"`
	Nickname             *string  `protobuf:"bytes,2,req,name=Nickname" json:"Nickname,omitempty"`
	Avatar               *string  `protobuf:"bytes,3,req,name=Avatar" json:"Avatar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RealUser) Reset()         { *m = RealUser{} }
func (m *RealUser) String() string { return proto.CompactTextString(m) }
func (*RealUser) ProtoMessage()    {}
func (*RealUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{2}
}

func (m *RealUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RealUser.Unmarshal(m, b)
}
func (m *RealUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RealUser.Marshal(b, m, deterministic)
}
func (m *RealUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealUser.Merge(m, src)
}
func (m *RealUser) XXX_Size() int {
	return xxx_messageInfo_RealUser.Size(m)
}
func (m *RealUser) XXX_DiscardUnknown() {
	xxx_messageInfo_RealUser.DiscardUnknown(m)
}

var xxx_messageInfo_RealUser proto.InternalMessageInfo

func (m *RealUser) GetUsername() string {
	if m != nil && m.Username != nil {
		return *m.Username
	}
	return ""
}

func (m *RealUser) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *RealUser) GetAvatar() string {
	if m != nil && m.Avatar != nil {
		return *m.Avatar
	}
	return ""
}

//User is login data
type User struct {
	Username             *string  `protobuf:"bytes,1,req,name=Username" json:"Username,omitempty"`
	Password             *string  `protobuf:"bytes,2,req,name=Password" json:"Password,omitempty"`
	Token                *string  `protobuf:"bytes,3,req,name=Token" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{3}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUsername() string {
	if m != nil && m.Username != nil {
		return *m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *User) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

//Info is for changing avatar data and nickname
type InfoWithUsername struct {
	Username             *string  `protobuf:"bytes,1,req,name=Username" json:"Username,omitempty"`
	Info                 []byte   `protobuf:"bytes,2,opt,name=Info" json:"Info,omitempty"`
	Token                *string  `protobuf:"bytes,3,req,name=Token" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoWithUsername) Reset()         { *m = InfoWithUsername{} }
func (m *InfoWithUsername) String() string { return proto.CompactTextString(m) }
func (*InfoWithUsername) ProtoMessage()    {}
func (*InfoWithUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{4}
}

func (m *InfoWithUsername) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoWithUsername.Unmarshal(m, b)
}
func (m *InfoWithUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoWithUsername.Marshal(b, m, deterministic)
}
func (m *InfoWithUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoWithUsername.Merge(m, src)
}
func (m *InfoWithUsername) XXX_Size() int {
	return xxx_messageInfo_InfoWithUsername.Size(m)
}
func (m *InfoWithUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoWithUsername.DiscardUnknown(m)
}

var xxx_messageInfo_InfoWithUsername proto.InternalMessageInfo

func (m *InfoWithUsername) GetUsername() string {
	if m != nil && m.Username != nil {
		return *m.Username
	}
	return ""
}

func (m *InfoWithUsername) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *InfoWithUsername) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*ToServerData)(nil), "data.toServerData")
	proto.RegisterType((*ResponseFromServer)(nil), "data.ResponseFromServer")
	proto.RegisterType((*RealUser)(nil), "data.RealUser")
	proto.RegisterType((*User)(nil), "data.User")
	proto.RegisterType((*InfoWithUsername)(nil), "data.InfoWithUsername")
}

func init() { proto.RegisterFile("data.proto", fileDescriptor_871986018790d2fd) }

var fileDescriptor_871986018790d2fd = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0x2d, 0xb6, 0x88, 0x93, 0x82, 0x64, 0x4f, 0x8d, 0x27, 0xd2, 0x13, 0x27, 0x4c, 0x38,
	0xa0, 0x5e, 0x88, 0x24, 0xc4, 0xc4, 0x0b, 0x31, 0x20, 0xf1, 0xbc, 0x59, 0x46, 0xda, 0x00, 0x3b,
	0xcd, 0xee, 0x14, 0xe3, 0x2b, 0xf8, 0x46, 0xbe, 0x9d, 0xd9, 0x2e, 0x46, 0xe3, 0x9f, 0x43, 0x3d,
	0xed, 0xec, 0x97, 0xf9, 0x7d, 0x33, 0xf9, 0x06, 0x60, 0x25, 0x59, 0x0e, 0x0a, 0x43, 0x4c, 0x22,
	0x74, 0x75, 0x7a, 0x01, 0x31, 0xd3, 0x02, 0xcd, 0x1e, 0xcd, 0x54, 0xb2, 0x14, 0x6d, 0x88, 0x14,
	0xbf, 0x14, 0x98, 0x04, 0xbd, 0x46, 0x3f, 0x12, 0x5d, 0x68, 0x65, 0xcc, 0x85, 0x6b, 0x4d, 0x1a,
	0xbd, 0xa0, 0x1f, 0xa7, 0x23, 0x10, 0x73, 0xb4, 0x05, 0x69, 0x8b, 0xb7, 0x86, 0x76, 0x1e, 0x15,
	0x67, 0x70, 0xb2, 0x28, 0x95, 0x42, 0x6b, 0x2b, 0xb0, 0xe5, 0x04, 0x56, 0xc5, 0xf4, 0x93, 0x1b,
	0x43, 0x6b, 0x8e, 0x72, 0xbb, 0xb4, 0x68, 0x9c, 0xab, 0x7b, 0xb5, 0xdc, 0xf9, 0x39, 0xa7, 0x4e,
	0x99, 0xe5, 0x6a, 0x53, 0x29, 0x8d, 0x4a, 0xe9, 0x40, 0x73, 0xb2, 0x97, 0x2c, 0x4d, 0x72, 0xec,
	0xfe, 0xe9, 0x35, 0x84, 0x7f, 0xb3, 0xf7, 0xd2, 0xda, 0x67, 0x32, 0xab, 0x03, 0xdb, 0x86, 0xe8,
	0x81, 0x36, 0xa8, 0x0f, 0xe8, 0x04, 0xba, 0x77, 0xfa, 0x89, 0x1e, 0x73, 0xce, 0x3e, 0xd0, 0x5f,
	0x6c, 0x62, 0x08, 0x5d, 0x97, 0x5f, 0xf7, 0x9b, 0xc5, 0xf0, 0x2d, 0x80, 0x78, 0x52, 0x72, 0x86,
	0x9a, 0x73, 0x25, 0x19, 0xc5, 0x25, 0x44, 0x5b, 0x5a, 0xe7, 0x5a, 0x88, 0x41, 0x95, 0xe9, 0xd7,
	0x10, 0xcf, 0x13, 0xaf, 0xfd, 0xcc, 0x29, 0x3d, 0x12, 0x23, 0x08, 0x33, 0xda, 0x61, 0x6d, 0xee,
	0x0a, 0x9a, 0x5b, 0x5a, 0x53, 0xc9, 0x75, 0xc9, 0xe1, 0x6b, 0x00, 0xcd, 0xa5, 0x3b, 0x21, 0x8a,
	0x1b, 0xe8, 0x94, 0x55, 0xe5, 0xc2, 0x9e, 0xc9, 0x7f, 0xac, 0x31, 0x86, 0xd8, 0x3b, 0xf8, 0xe3,
	0xd4, 0xe5, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x90, 0xed, 0xbb, 0x82, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthenticateClient is the client API for Authenticate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthenticateClient interface {
	Login(ctx context.Context, in *ToServerData, opts ...grpc.CallOption) (*ResponseFromServer, error)
	Home(ctx context.Context, in *ToServerData, opts ...grpc.CallOption) (*ResponseFromServer, error)
	Logout(ctx context.Context, in *ToServerData, opts ...grpc.CallOption) (*ResponseFromServer, error)
}

type authenticateClient struct {
	cc *grpc.ClientConn
}

func NewAuthenticateClient(cc *grpc.ClientConn) AuthenticateClient {
	return &authenticateClient{cc}
}

func (c *authenticateClient) Login(ctx context.Context, in *ToServerData, opts ...grpc.CallOption) (*ResponseFromServer, error) {
	out := new(ResponseFromServer)
	err := c.cc.Invoke(ctx, "/data.Authenticate/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateClient) Home(ctx context.Context, in *ToServerData, opts ...grpc.CallOption) (*ResponseFromServer, error) {
	out := new(ResponseFromServer)
	err := c.cc.Invoke(ctx, "/data.Authenticate/home", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateClient) Logout(ctx context.Context, in *ToServerData, opts ...grpc.CallOption) (*ResponseFromServer, error) {
	out := new(ResponseFromServer)
	err := c.cc.Invoke(ctx, "/data.Authenticate/logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticateServer is the server API for Authenticate service.
type AuthenticateServer interface {
	Login(context.Context, *ToServerData) (*ResponseFromServer, error)
	Home(context.Context, *ToServerData) (*ResponseFromServer, error)
	Logout(context.Context, *ToServerData) (*ResponseFromServer, error)
}

// UnimplementedAuthenticateServer can be embedded to have forward compatible implementations.
type UnimplementedAuthenticateServer struct {
}

func (*UnimplementedAuthenticateServer) Login(ctx context.Context, req *ToServerData) (*ResponseFromServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAuthenticateServer) Home(ctx context.Context, req *ToServerData) (*ResponseFromServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Home not implemented")
}
func (*UnimplementedAuthenticateServer) Logout(ctx context.Context, req *ToServerData) (*ResponseFromServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}

func RegisterAuthenticateServer(s *grpc.Server, srv AuthenticateServer) {
	s.RegisterService(&_Authenticate_serviceDesc, srv)
}

func _Authenticate_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToServerData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Authenticate/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateServer).Login(ctx, req.(*ToServerData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenticate_Home_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToServerData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateServer).Home(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Authenticate/Home",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateServer).Home(ctx, req.(*ToServerData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenticate_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToServerData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Authenticate/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateServer).Logout(ctx, req.(*ToServerData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authenticate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.Authenticate",
	HandlerType: (*AuthenticateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _Authenticate_Login_Handler,
		},
		{
			MethodName: "home",
			Handler:    _Authenticate_Home_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _Authenticate_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data.proto",
}

// UpdateClient is the client API for Update service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateClient interface {
	UpdateNickName(ctx context.Context, in *ToServerData, opts ...grpc.CallOption) (*ResponseFromServer, error)
	UpdateAvatar(ctx context.Context, in *ToServerData, opts ...grpc.CallOption) (*ResponseFromServer, error)
}

type updateClient struct {
	cc *grpc.ClientConn
}

func NewUpdateClient(cc *grpc.ClientConn) UpdateClient {
	return &updateClient{cc}
}

func (c *updateClient) UpdateNickName(ctx context.Context, in *ToServerData, opts ...grpc.CallOption) (*ResponseFromServer, error) {
	out := new(ResponseFromServer)
	err := c.cc.Invoke(ctx, "/data.Update/updateNickName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateClient) UpdateAvatar(ctx context.Context, in *ToServerData, opts ...grpc.CallOption) (*ResponseFromServer, error) {
	out := new(ResponseFromServer)
	err := c.cc.Invoke(ctx, "/data.Update/updateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateServer is the server API for Update service.
type UpdateServer interface {
	UpdateNickName(context.Context, *ToServerData) (*ResponseFromServer, error)
	UpdateAvatar(context.Context, *ToServerData) (*ResponseFromServer, error)
}

// UnimplementedUpdateServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateServer struct {
}

func (*UnimplementedUpdateServer) UpdateNickName(ctx context.Context, req *ToServerData) (*ResponseFromServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNickName not implemented")
}
func (*UnimplementedUpdateServer) UpdateAvatar(ctx context.Context, req *ToServerData) (*ResponseFromServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvatar not implemented")
}

func RegisterUpdateServer(s *grpc.Server, srv UpdateServer) {
	s.RegisterService(&_Update_serviceDesc, srv)
}

func _Update_UpdateNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToServerData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).UpdateNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Update/UpdateNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).UpdateNickName(ctx, req.(*ToServerData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Update_UpdateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToServerData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).UpdateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Update/UpdateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).UpdateAvatar(ctx, req.(*ToServerData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Update_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.Update",
	HandlerType: (*UpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updateNickName",
			Handler:    _Update_UpdateNickName_Handler,
		},
		{
			MethodName: "updateAvatar",
			Handler:    _Update_UpdateAvatar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data.proto",
}
